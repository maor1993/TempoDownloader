
tempodownloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002814  08001278  08001278  00011278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003a8c  08003a8c  00013a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003a90  08003a90  00013a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08003a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000130  20000024  08003ab8  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000154  08003ab8  00020154  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   000095f5  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001342  00000000  00000000  00029641  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000398  00000000  00000000  0002a988  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0002ad20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001d29  00000000  00000000  0002b020  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000023c4  00000000  00000000  0002cd49  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002f10d  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000ae8  00000000  00000000  0002f18c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002fc74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001260 	.word	0x08001260

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08001260 	.word	0x08001260

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <HAL_Init+0x24>)
 80003fa:	4a07      	ldr	r2, [pc, #28]	; (8000418 <HAL_Init+0x24>)
 80003fc:	6812      	ldr	r2, [r2, #0]
 80003fe:	2110      	movs	r1, #16
 8000400:	430a      	orrs	r2, r1
 8000402:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f80e 	bl	8000426 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800040a:	f000 f807 	bl	800041c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800040e:	2300      	movs	r3, #0
}
 8000410:	0018      	movs	r0, r3
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	40022000 	.word	0x40022000

0800041c <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}

08000426 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000426:	b580      	push	{r7, lr}
 8000428:	b082      	sub	sp, #8
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800042e:	f000 f947 	bl	80006c0 <HAL_RCC_GetHCLKFreq>
 8000432:	0002      	movs	r2, r0
 8000434:	23fa      	movs	r3, #250	; 0xfa
 8000436:	0099      	lsls	r1, r3, #2
 8000438:	0010      	movs	r0, r2
 800043a:	f7ff fe65 	bl	8000108 <__udivsi3>
 800043e:	0003      	movs	r3, r0
 8000440:	0018      	movs	r0, r3
 8000442:	f000 f909 	bl	8000658 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000446:	6879      	ldr	r1, [r7, #4]
 8000448:	2301      	movs	r3, #1
 800044a:	425b      	negs	r3, r3
 800044c:	2200      	movs	r2, #0
 800044e:	0018      	movs	r0, r3
 8000450:	f000 f8dc 	bl	800060c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000454:	2300      	movs	r3, #0
}
 8000456:	0018      	movs	r0, r3
 8000458:	46bd      	mov	sp, r7
 800045a:	b002      	add	sp, #8
 800045c:	bd80      	pop	{r7, pc}
	...

08000460 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  uwTick++;
 8000464:	4b03      	ldr	r3, [pc, #12]	; (8000474 <HAL_IncTick+0x14>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	1c5a      	adds	r2, r3, #1
 800046a:	4b02      	ldr	r3, [pc, #8]	; (8000474 <HAL_IncTick+0x14>)
 800046c:	601a      	str	r2, [r3, #0]
}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000148 	.word	0x20000148

08000478 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  return uwTick;
 800047c:	4b02      	ldr	r3, [pc, #8]	; (8000488 <HAL_GetTick+0x10>)
 800047e:	681b      	ldr	r3, [r3, #0]
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	20000148 	.word	0x20000148

0800048c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000494:	2300      	movs	r3, #0
 8000496:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8000498:	f7ff ffee 	bl	8000478 <HAL_GetTick>
 800049c:	0003      	movs	r3, r0
 800049e:	60fb      	str	r3, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	f7ff ffe9 	bl	8000478 <HAL_GetTick>
 80004a6:	0002      	movs	r2, r0
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	1ad2      	subs	r2, r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	d3f7      	bcc.n	80004a2 <HAL_Delay+0x16>
  {
  }
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b004      	add	sp, #16
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	0002      	movs	r2, r0
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <NVIC_EnableIRQ+0x28>)
 80004ca:	1dfa      	adds	r2, r7, #7
 80004cc:	7812      	ldrb	r2, [r2, #0]
 80004ce:	0011      	movs	r1, r2
 80004d0:	221f      	movs	r2, #31
 80004d2:	400a      	ands	r2, r1
 80004d4:	2101      	movs	r1, #1
 80004d6:	4091      	lsls	r1, r2
 80004d8:	000a      	movs	r2, r1
 80004da:	601a      	str	r2, [r3, #0]
}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	b002      	add	sp, #8
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	e000e100 	.word	0xe000e100

080004e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004e8:	b5b0      	push	{r4, r5, r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	0002      	movs	r2, r0
 80004f0:	6039      	str	r1, [r7, #0]
 80004f2:	1dfb      	adds	r3, r7, #7
 80004f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b7f      	cmp	r3, #127	; 0x7f
 80004fc:	d932      	bls.n	8000564 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004fe:	4c2f      	ldr	r4, [pc, #188]	; (80005bc <NVIC_SetPriority+0xd4>)
 8000500:	1dfb      	adds	r3, r7, #7
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	001a      	movs	r2, r3
 8000506:	230f      	movs	r3, #15
 8000508:	4013      	ands	r3, r2
 800050a:	3b08      	subs	r3, #8
 800050c:	0899      	lsrs	r1, r3, #2
 800050e:	4a2b      	ldr	r2, [pc, #172]	; (80005bc <NVIC_SetPriority+0xd4>)
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	0018      	movs	r0, r3
 8000516:	230f      	movs	r3, #15
 8000518:	4003      	ands	r3, r0
 800051a:	3b08      	subs	r3, #8
 800051c:	089b      	lsrs	r3, r3, #2
 800051e:	3306      	adds	r3, #6
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	18d3      	adds	r3, r2, r3
 8000524:	3304      	adds	r3, #4
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	1dfa      	adds	r2, r7, #7
 800052a:	7812      	ldrb	r2, [r2, #0]
 800052c:	0010      	movs	r0, r2
 800052e:	2203      	movs	r2, #3
 8000530:	4002      	ands	r2, r0
 8000532:	00d2      	lsls	r2, r2, #3
 8000534:	20ff      	movs	r0, #255	; 0xff
 8000536:	4090      	lsls	r0, r2
 8000538:	0002      	movs	r2, r0
 800053a:	43d2      	mvns	r2, r2
 800053c:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	019b      	lsls	r3, r3, #6
 8000542:	20ff      	movs	r0, #255	; 0xff
 8000544:	4018      	ands	r0, r3
 8000546:	1dfb      	adds	r3, r7, #7
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	001d      	movs	r5, r3
 800054c:	2303      	movs	r3, #3
 800054e:	402b      	ands	r3, r5
 8000550:	00db      	lsls	r3, r3, #3
 8000552:	4098      	lsls	r0, r3
 8000554:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000556:	431a      	orrs	r2, r3
 8000558:	1d8b      	adds	r3, r1, #6
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	18e3      	adds	r3, r4, r3
 800055e:	3304      	adds	r3, #4
 8000560:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000562:	e027      	b.n	80005b4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000564:	4c16      	ldr	r4, [pc, #88]	; (80005c0 <NVIC_SetPriority+0xd8>)
 8000566:	1dfb      	adds	r3, r7, #7
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	b25b      	sxtb	r3, r3
 800056c:	089b      	lsrs	r3, r3, #2
 800056e:	4914      	ldr	r1, [pc, #80]	; (80005c0 <NVIC_SetPriority+0xd8>)
 8000570:	1dfa      	adds	r2, r7, #7
 8000572:	7812      	ldrb	r2, [r2, #0]
 8000574:	b252      	sxtb	r2, r2
 8000576:	0892      	lsrs	r2, r2, #2
 8000578:	32c0      	adds	r2, #192	; 0xc0
 800057a:	0092      	lsls	r2, r2, #2
 800057c:	5852      	ldr	r2, [r2, r1]
 800057e:	1df9      	adds	r1, r7, #7
 8000580:	7809      	ldrb	r1, [r1, #0]
 8000582:	0008      	movs	r0, r1
 8000584:	2103      	movs	r1, #3
 8000586:	4001      	ands	r1, r0
 8000588:	00c9      	lsls	r1, r1, #3
 800058a:	20ff      	movs	r0, #255	; 0xff
 800058c:	4088      	lsls	r0, r1
 800058e:	0001      	movs	r1, r0
 8000590:	43c9      	mvns	r1, r1
 8000592:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	0192      	lsls	r2, r2, #6
 8000598:	20ff      	movs	r0, #255	; 0xff
 800059a:	4010      	ands	r0, r2
 800059c:	1dfa      	adds	r2, r7, #7
 800059e:	7812      	ldrb	r2, [r2, #0]
 80005a0:	0015      	movs	r5, r2
 80005a2:	2203      	movs	r2, #3
 80005a4:	402a      	ands	r2, r5
 80005a6:	00d2      	lsls	r2, r2, #3
 80005a8:	4090      	lsls	r0, r2
 80005aa:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005ac:	430a      	orrs	r2, r1
 80005ae:	33c0      	adds	r3, #192	; 0xc0
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	511a      	str	r2, [r3, r4]
}
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	b002      	add	sp, #8
 80005ba:	bdb0      	pop	{r4, r5, r7, pc}
 80005bc:	e000ed00 	.word	0xe000ed00
 80005c0:	e000e100 	.word	0xe000e100

080005c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <SysTick_Config+0x40>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d901      	bls.n	80005da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005d6:	2301      	movs	r3, #1
 80005d8:	e010      	b.n	80005fc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <SysTick_Config+0x44>)
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	3a01      	subs	r2, #1
 80005e0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005e2:	2301      	movs	r3, #1
 80005e4:	425b      	negs	r3, r3
 80005e6:	2103      	movs	r1, #3
 80005e8:	0018      	movs	r0, r3
 80005ea:	f7ff ff7d 	bl	80004e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <SysTick_Config+0x44>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <SysTick_Config+0x44>)
 80005f6:	2207      	movs	r2, #7
 80005f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005fa:	2300      	movs	r3, #0
}
 80005fc:	0018      	movs	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	b002      	add	sp, #8
 8000602:	bd80      	pop	{r7, pc}
 8000604:	00ffffff 	.word	0x00ffffff
 8000608:	e000e010 	.word	0xe000e010

0800060c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	60b9      	str	r1, [r7, #8]
 8000614:	607a      	str	r2, [r7, #4]
 8000616:	230f      	movs	r3, #15
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	1c02      	adds	r2, r0, #0
 800061c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	230f      	movs	r3, #15
 8000622:	18fb      	adds	r3, r7, r3
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	b25b      	sxtb	r3, r3
 8000628:	0011      	movs	r1, r2
 800062a:	0018      	movs	r0, r3
 800062c:	f7ff ff5c 	bl	80004e8 <NVIC_SetPriority>
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b004      	add	sp, #16
 8000636:	bd80      	pop	{r7, pc}

08000638 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	0002      	movs	r2, r0
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000644:	1dfb      	adds	r3, r7, #7
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b25b      	sxtb	r3, r3
 800064a:	0018      	movs	r0, r3
 800064c:	f7ff ff36 	bl	80004bc <NVIC_EnableIRQ>
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b002      	add	sp, #8
 8000656:	bd80      	pop	{r7, pc}

08000658 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	0018      	movs	r0, r3
 8000664:	f7ff ffae 	bl	80005c4 <SysTick_Config>
 8000668:	0003      	movs	r3, r0
}
 800066a:	0018      	movs	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	b002      	add	sp, #8
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2b04      	cmp	r3, #4
 8000680:	d106      	bne.n	8000690 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000686:	6812      	ldr	r2, [r2, #0]
 8000688:	2104      	movs	r1, #4
 800068a:	430a      	orrs	r2, r1
 800068c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800068e:	e005      	b.n	800069c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000692:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000694:	6812      	ldr	r2, [r2, #0]
 8000696:	2104      	movs	r1, #4
 8000698:	438a      	bics	r2, r1
 800069a:	601a      	str	r2, [r3, #0]
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b002      	add	sp, #8
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	e000e010 	.word	0xe000e010

080006a8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80006ac:	f000 f803 	bl	80006b6 <HAL_SYSTICK_Callback>
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80006c4:	4b02      	ldr	r3, [pc, #8]	; (80006d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80006c6:	681b      	ldr	r3, [r3, #0]
}
 80006c8:	0018      	movs	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	20000020 	.word	0x20000020

080006d4 <sst_flash_read_id>:

 static volatile uint8_t nWorking_buffer[FLASH_BUF_MAX_SIZE];
  volatile sst_flash_handler_type sHandler;

 static void sst_flash_read_id()
 {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
 	nWorking_buffer[0] = SST_FLASH_CMD_JEDEC_ID;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <sst_flash_read_id+0x1c>)
 80006da:	229f      	movs	r2, #159	; 0x9f
 80006dc:	701a      	strb	r2, [r3, #0]
 	spi_write_read(nWorking_buffer,1,nWorking_buffer+1,4);
 80006de:	4a05      	ldr	r2, [pc, #20]	; (80006f4 <sst_flash_read_id+0x20>)
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <sst_flash_read_id+0x1c>)
 80006e2:	2304      	movs	r3, #4
 80006e4:	2101      	movs	r1, #1
 80006e6:	f000 fc65 	bl	8000fb4 <spi_write_read>
 }
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000040 	.word	0x20000040
 80006f4:	20000041 	.word	0x20000041

080006f8 <sst_flash_write_enable>:


 void sst_flash_write_enable()
 {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
 	spi_write_single(SST_FLASH_CMD_WREN);
 80006fc:	2006      	movs	r0, #6
 80006fe:	f000 fc2f 	bl	8000f60 <spi_write_single>
 }
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <sst_flash_write_cmd>:
		return spi_write_read(nWorking_buffer,4,pData,nBytes);
 }


 uint8_t sst_flash_write_cmd(uint32_t nAddr,uint8_t nbytes,uint8_t* pData)
 {
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	607a      	str	r2, [r7, #4]
 8000712:	230b      	movs	r3, #11
 8000714:	18fb      	adds	r3, r7, r3
 8000716:	1c0a      	adds	r2, r1, #0
 8000718:	701a      	strb	r2, [r3, #0]
		//build the tx msg
		*((uint32_t*)nWorking_buffer) = ((nAddr>>24)&0xff) | // move byte 3 to byte 0
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <sst_flash_write_cmd+0x70>)
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	0e11      	lsrs	r1, r2, #24
	            ((nAddr<<8)&0xff0000) | // move byte 1 to byte 2
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	0210      	lsls	r0, r2, #8
 8000724:	22ff      	movs	r2, #255	; 0xff
 8000726:	0412      	lsls	r2, r2, #16
 8000728:	4002      	ands	r2, r0
		*((uint32_t*)nWorking_buffer) = ((nAddr>>24)&0xff) | // move byte 3 to byte 0
 800072a:	4311      	orrs	r1, r2
	            ((nAddr>>8)&0xff00) | // move byte 2 to byte 1
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	0a10      	lsrs	r0, r2, #8
 8000730:	22ff      	movs	r2, #255	; 0xff
 8000732:	0212      	lsls	r2, r2, #8
 8000734:	4002      	ands	r2, r0
	            ((nAddr<<8)&0xff0000) | // move byte 1 to byte 2
 8000736:	4311      	orrs	r1, r2
	            ((nAddr<<24)&0xff000000); // byte 0 to byte 3;
 8000738:	68fa      	ldr	r2, [r7, #12]
 800073a:	0612      	lsls	r2, r2, #24
	            ((nAddr>>8)&0xff00) | // move byte 2 to byte 1
 800073c:	430a      	orrs	r2, r1
		*((uint32_t*)nWorking_buffer) = ((nAddr>>24)&0xff) | // move byte 3 to byte 0
 800073e:	601a      	str	r2, [r3, #0]
		nWorking_buffer[0] = SST_FLASH_CMD_PP;
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <sst_flash_write_cmd+0x70>)
 8000742:	2202      	movs	r2, #2
 8000744:	701a      	strb	r2, [r3, #0]

		memcpy(nWorking_buffer+4,pData,nbytes);
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <sst_flash_write_cmd+0x74>)
 8000748:	230b      	movs	r3, #11
 800074a:	18fb      	adds	r3, r7, r3
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	0019      	movs	r1, r3
 8000752:	f000 fd7b 	bl	800124c <memcpy>

		return spi_write_blocking(nWorking_buffer,nbytes+4);
 8000756:	230b      	movs	r3, #11
 8000758:	18fb      	adds	r3, r7, r3
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b29b      	uxth	r3, r3
 800075e:	3304      	adds	r3, #4
 8000760:	b29a      	uxth	r2, r3
 8000762:	4b05      	ldr	r3, [pc, #20]	; (8000778 <sst_flash_write_cmd+0x70>)
 8000764:	0011      	movs	r1, r2
 8000766:	0018      	movs	r0, r3
 8000768:	f000 fbb8 	bl	8000edc <spi_write_blocking>
 800076c:	0003      	movs	r3, r0
 800076e:	b2db      	uxtb	r3, r3

 }
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b004      	add	sp, #16
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000040 	.word	0x20000040
 800077c:	20000044 	.word	0x20000044

08000780 <sst_flash_init>:

uint8_t sst_flash_init()
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
	 uint8_t res;



	 //reset the flash.
	 spi_write_single(SST_FLASH_CMD_RSTEN);
 8000786:	2066      	movs	r0, #102	; 0x66
 8000788:	f000 fbea 	bl	8000f60 <spi_write_single>
	 HAL_Delay(10);
 800078c:	200a      	movs	r0, #10
 800078e:	f7ff fe7d 	bl	800048c <HAL_Delay>
	 spi_write_single(SST_FLASH_CMD_RST);
 8000792:	2099      	movs	r0, #153	; 0x99
 8000794:	f000 fbe4 	bl	8000f60 <spi_write_single>

	 HAL_Delay(100);
 8000798:	2064      	movs	r0, #100	; 0x64
 800079a:	f7ff fe77 	bl	800048c <HAL_Delay>

	 //for now, all we need is to check that we can communicate with the flash.
	 sst_flash_read_id();
 800079e:	f7ff ff99 	bl	80006d4 <sst_flash_read_id>
	 res =nWorking_buffer[1];
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <sst_flash_init+0x40>)
 80007a6:	7852      	ldrb	r2, [r2, #1]
 80007a8:	701a      	strb	r2, [r3, #0]

	 HAL_Delay(10);
 80007aa:	200a      	movs	r0, #10
 80007ac:	f7ff fe6e 	bl	800048c <HAL_Delay>

	// verify the block is protected
	 sst_flash_read_status();
 80007b0:	f000 f808 	bl	80007c4 <sst_flash_read_status>



	 return 0;
 80007b4:	2300      	movs	r3, #0


}
 80007b6:	0018      	movs	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b002      	add	sp, #8
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	20000040 	.word	0x20000040

080007c4 <sst_flash_read_status>:

void sst_flash_read_status()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	nWorking_buffer[0] = SST_FLASH_CMD_RDSR;
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <sst_flash_read_status+0x28>)
 80007ca:	2205      	movs	r2, #5
 80007cc:	701a      	strb	r2, [r3, #0]

	spi_write_read(nWorking_buffer,1,nWorking_buffer+1,1);
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <sst_flash_read_status+0x2c>)
 80007d0:	4806      	ldr	r0, [pc, #24]	; (80007ec <sst_flash_read_status+0x28>)
 80007d2:	2301      	movs	r3, #1
 80007d4:	2101      	movs	r1, #1
 80007d6:	f000 fbed 	bl	8000fb4 <spi_write_read>
	sHandler.nStatus_byte = nWorking_buffer[1];
 80007da:	4b04      	ldr	r3, [pc, #16]	; (80007ec <sst_flash_read_status+0x28>)
 80007dc:	785b      	ldrb	r3, [r3, #1]
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <sst_flash_read_status+0x30>)
 80007e2:	701a      	strb	r2, [r3, #0]
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	20000040 	.word	0x20000040
 80007f0:	20000041 	.word	0x20000041
 80007f4:	2000014c 	.word	0x2000014c

080007f8 <sst_flash_read_block_proc>:
	nWorking_buffer[1] = nStatusbyte;
	spi_write_blocking(nWorking_buffer,2);

}
void sst_flash_read_block_proc()
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	nWorking_buffer[0] = SST_FLASH_CMD_RBPR;
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <sst_flash_read_block_proc+0x1c>)
 80007fe:	2272      	movs	r2, #114	; 0x72
 8000800:	701a      	strb	r2, [r3, #0]
	spi_write_read(nWorking_buffer,1,nWorking_buffer+1,18);
 8000802:	4a05      	ldr	r2, [pc, #20]	; (8000818 <sst_flash_read_block_proc+0x20>)
 8000804:	4803      	ldr	r0, [pc, #12]	; (8000814 <sst_flash_read_block_proc+0x1c>)
 8000806:	2312      	movs	r3, #18
 8000808:	2101      	movs	r1, #1
 800080a:	f000 fbd3 	bl	8000fb4 <spi_write_read>

}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000040 	.word	0x20000040
 8000818:	20000041 	.word	0x20000041

0800081c <sst_flash_write_block_proc>:
void sst_flash_write_block_proc()
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
	uint8_t i;
	nWorking_buffer[0] = SST_FLASH_CMD_WBPR;
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <sst_flash_write_block_proc+0x44>)
 8000824:	2242      	movs	r2, #66	; 0x42
 8000826:	701a      	strb	r2, [r3, #0]
	for(i=0;i<18;i++)
 8000828:	1dfb      	adds	r3, r7, #7
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	e00a      	b.n	8000846 <sst_flash_write_block_proc+0x2a>
	{
		nWorking_buffer[1+i] = 0;
 8000830:	1dfb      	adds	r3, r7, #7
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	3301      	adds	r3, #1
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <sst_flash_write_block_proc+0x44>)
 8000838:	2100      	movs	r1, #0
 800083a:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<18;i++)
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	781a      	ldrb	r2, [r3, #0]
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	3201      	adds	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b11      	cmp	r3, #17
 800084c:	d9f0      	bls.n	8000830 <sst_flash_write_block_proc+0x14>
	}
	spi_write_blocking(nWorking_buffer,19);
 800084e:	4b04      	ldr	r3, [pc, #16]	; (8000860 <sst_flash_write_block_proc+0x44>)
 8000850:	2113      	movs	r1, #19
 8000852:	0018      	movs	r0, r3
 8000854:	f000 fb42 	bl	8000edc <spi_write_blocking>

}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	b002      	add	sp, #8
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000040 	.word	0x20000040

08000864 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
  uint8_t res=0;
 800086a:	1d7b      	adds	r3, r7, #5
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
  uint16_t i;
  uint16_t size =0;
 8000870:	1cbb      	adds	r3, r7, #2
 8000872:	2200      	movs	r2, #0
 8000874:	801a      	strh	r2, [r3, #0]
  uint8_t nFontsize =0;
 8000876:	1c7b      	adds	r3, r7, #1
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]



  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087c:	f7ff fdba 	bl	80003f4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000880:	f000 f972 	bl	8000b68 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000884:	f000 fa82 	bl	8000d8c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000888:	f000 f9dc 	bl	8000c44 <MX_SPI1_Init>




  res = sst_flash_init();
 800088c:	1d7c      	adds	r4, r7, #5
 800088e:	f7ff ff77 	bl	8000780 <sst_flash_init>
 8000892:	0003      	movs	r3, r0
 8000894:	7023      	strb	r3, [r4, #0]





  sst_flash_write_block_proc();
 8000896:	f7ff ffc1 	bl	800081c <sst_flash_write_block_proc>
  sst_flash_read_block_proc();
 800089a:	f7ff ffad 	bl	80007f8 <sst_flash_read_block_proc>
  sst_flash_write_enable();
 800089e:	f7ff ff2b 	bl	80006f8 <sst_flash_write_enable>
  sst_flash_read_status();
 80008a2:	f7ff ff8f 	bl	80007c4 <sst_flash_read_status>

    pGP_LED->ODR |= GPIO_ODR_3;
 80008a6:	4ba7      	ldr	r3, [pc, #668]	; (8000b44 <main+0x2e0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4aa6      	ldr	r2, [pc, #664]	; (8000b44 <main+0x2e0>)
 80008ac:	6812      	ldr	r2, [r2, #0]
 80008ae:	6952      	ldr	r2, [r2, #20]
 80008b0:	2108      	movs	r1, #8
 80008b2:	430a      	orrs	r2, r1
 80008b4:	615a      	str	r2, [r3, #20]
    while(pGP_BTN->IDR&GPIO_IDR_0);
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	4ba3      	ldr	r3, [pc, #652]	; (8000b48 <main+0x2e4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	691b      	ldr	r3, [r3, #16]
 80008be:	2201      	movs	r2, #1
 80008c0:	4013      	ands	r3, r2
 80008c2:	d1f9      	bne.n	80008b8 <main+0x54>
    pGP_LED->ODR &= ~GPIO_ODR_3;
 80008c4:	4b9f      	ldr	r3, [pc, #636]	; (8000b44 <main+0x2e0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a9e      	ldr	r2, [pc, #632]	; (8000b44 <main+0x2e0>)
 80008ca:	6812      	ldr	r2, [r2, #0]
 80008cc:	6952      	ldr	r2, [r2, #20]
 80008ce:	2108      	movs	r1, #8
 80008d0:	438a      	bics	r2, r1
 80008d2:	615a      	str	r2, [r3, #20]
    //step one, font small.
    size = sizeof(fontsmall);
 80008d4:	1cbb      	adds	r3, r7, #2
 80008d6:	4a9d      	ldr	r2, [pc, #628]	; (8000b4c <main+0x2e8>)
 80008d8:	801a      	strh	r2, [r3, #0]
    nFontsize = 20;
 80008da:	1c7b      	adds	r3, r7, #1
 80008dc:	2214      	movs	r2, #20
 80008de:	701a      	strb	r2, [r3, #0]
    for(i=0;i<size/nFontsize;i++)
 80008e0:	1dbb      	adds	r3, r7, #6
 80008e2:	2200      	movs	r2, #0
 80008e4:	801a      	strh	r2, [r3, #0]
 80008e6:	e039      	b.n	800095c <main+0xf8>
    {
    	pGP_LED->ODR &= ~GPIO_ODR_3;
 80008e8:	4b96      	ldr	r3, [pc, #600]	; (8000b44 <main+0x2e0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a95      	ldr	r2, [pc, #596]	; (8000b44 <main+0x2e0>)
 80008ee:	6812      	ldr	r2, [r2, #0]
 80008f0:	6952      	ldr	r2, [r2, #20]
 80008f2:	2108      	movs	r1, #8
 80008f4:	438a      	bics	r2, r1
 80008f6:	615a      	str	r2, [r3, #20]
  	  sst_flash_write_enable();
 80008f8:	f7ff fefe 	bl	80006f8 <sst_flash_write_enable>

  	  sst_flash_write_cmd(FLASH_JUMP_SMALL+i*nFontsize,nFontsize,((uint8_t*)fontsmall)+i*nFontsize);
 80008fc:	1dbb      	adds	r3, r7, #6
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	1c7a      	adds	r2, r7, #1
 8000902:	7812      	ldrb	r2, [r2, #0]
 8000904:	4353      	muls	r3, r2
 8000906:	2280      	movs	r2, #128	; 0x80
 8000908:	0192      	lsls	r2, r2, #6
 800090a:	4694      	mov	ip, r2
 800090c:	4463      	add	r3, ip
 800090e:	0018      	movs	r0, r3
 8000910:	1dbb      	adds	r3, r7, #6
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	1c7a      	adds	r2, r7, #1
 8000916:	7812      	ldrb	r2, [r2, #0]
 8000918:	4353      	muls	r3, r2
 800091a:	001a      	movs	r2, r3
 800091c:	4b8c      	ldr	r3, [pc, #560]	; (8000b50 <main+0x2ec>)
 800091e:	18d2      	adds	r2, r2, r3
 8000920:	1c7b      	adds	r3, r7, #1
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	0019      	movs	r1, r3
 8000926:	f7ff feef 	bl	8000708 <sst_flash_write_cmd>

  	  do
  	  {
  		pGP_LED->ODR |= GPIO_ODR_3;
 800092a:	4b86      	ldr	r3, [pc, #536]	; (8000b44 <main+0x2e0>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a85      	ldr	r2, [pc, #532]	; (8000b44 <main+0x2e0>)
 8000930:	6812      	ldr	r2, [r2, #0]
 8000932:	6952      	ldr	r2, [r2, #20]
 8000934:	2108      	movs	r1, #8
 8000936:	430a      	orrs	r2, r1
 8000938:	615a      	str	r2, [r3, #20]
  		  sst_flash_read_status();
 800093a:	f7ff ff43 	bl	80007c4 <sst_flash_read_status>
  		  HAL_Delay(10);
 800093e:	200a      	movs	r0, #10
 8000940:	f7ff fda4 	bl	800048c <HAL_Delay>
  	  }while(sHandler.BUSY1);
 8000944:	4b83      	ldr	r3, [pc, #524]	; (8000b54 <main+0x2f0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	07db      	lsls	r3, r3, #31
 800094a:	0fdb      	lsrs	r3, r3, #31
 800094c:	b2db      	uxtb	r3, r3
 800094e:	2b00      	cmp	r3, #0
 8000950:	d1eb      	bne.n	800092a <main+0xc6>
    for(i=0;i<size/nFontsize;i++)
 8000952:	1dbb      	adds	r3, r7, #6
 8000954:	881a      	ldrh	r2, [r3, #0]
 8000956:	1dbb      	adds	r3, r7, #6
 8000958:	3201      	adds	r2, #1
 800095a:	801a      	strh	r2, [r3, #0]
 800095c:	1dbb      	adds	r3, r7, #6
 800095e:	881c      	ldrh	r4, [r3, #0]
 8000960:	1cbb      	adds	r3, r7, #2
 8000962:	881a      	ldrh	r2, [r3, #0]
 8000964:	1c7b      	adds	r3, r7, #1
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	0019      	movs	r1, r3
 800096a:	0010      	movs	r0, r2
 800096c:	f7ff fc56 	bl	800021c <__divsi3>
 8000970:	0003      	movs	r3, r0
 8000972:	429c      	cmp	r4, r3
 8000974:	dbb8      	blt.n	80008e8 <main+0x84>
    }


    	pGP_LED->ODR |= GPIO_ODR_3;
 8000976:	4b73      	ldr	r3, [pc, #460]	; (8000b44 <main+0x2e0>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a72      	ldr	r2, [pc, #456]	; (8000b44 <main+0x2e0>)
 800097c:	6812      	ldr	r2, [r2, #0]
 800097e:	6952      	ldr	r2, [r2, #20]
 8000980:	2108      	movs	r1, #8
 8000982:	430a      	orrs	r2, r1
 8000984:	615a      	str	r2, [r3, #20]
  	    while(pGP_BTN->IDR&GPIO_IDR_0);
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	4b6f      	ldr	r3, [pc, #444]	; (8000b48 <main+0x2e4>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	691b      	ldr	r3, [r3, #16]
 800098e:	2201      	movs	r2, #1
 8000990:	4013      	ands	r3, r2
 8000992:	d1f9      	bne.n	8000988 <main+0x124>
  	    pGP_LED->ODR &= ~GPIO_ODR_3;
 8000994:	4b6b      	ldr	r3, [pc, #428]	; (8000b44 <main+0x2e0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a6a      	ldr	r2, [pc, #424]	; (8000b44 <main+0x2e0>)
 800099a:	6812      	ldr	r2, [r2, #0]
 800099c:	6952      	ldr	r2, [r2, #20]
 800099e:	2108      	movs	r1, #8
 80009a0:	438a      	bics	r2, r1
 80009a2:	615a      	str	r2, [r3, #20]
  	    //step one, font med.
  	    size = sizeof(fontmed);
 80009a4:	1cbb      	adds	r3, r7, #2
 80009a6:	4a6c      	ldr	r2, [pc, #432]	; (8000b58 <main+0x2f4>)
 80009a8:	801a      	strh	r2, [r3, #0]
  	    nFontsize = 36;
 80009aa:	1c7b      	adds	r3, r7, #1
 80009ac:	2224      	movs	r2, #36	; 0x24
 80009ae:	701a      	strb	r2, [r3, #0]
  	    for(i=0;i<size/nFontsize;i++)
 80009b0:	1dbb      	adds	r3, r7, #6
 80009b2:	2200      	movs	r2, #0
 80009b4:	801a      	strh	r2, [r3, #0]
 80009b6:	e039      	b.n	8000a2c <main+0x1c8>
  	    {
  	    	pGP_LED->ODR &= ~GPIO_ODR_3;
 80009b8:	4b62      	ldr	r3, [pc, #392]	; (8000b44 <main+0x2e0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a61      	ldr	r2, [pc, #388]	; (8000b44 <main+0x2e0>)
 80009be:	6812      	ldr	r2, [r2, #0]
 80009c0:	6952      	ldr	r2, [r2, #20]
 80009c2:	2108      	movs	r1, #8
 80009c4:	438a      	bics	r2, r1
 80009c6:	615a      	str	r2, [r3, #20]
  	  	  sst_flash_write_enable();
 80009c8:	f7ff fe96 	bl	80006f8 <sst_flash_write_enable>

  	  	  sst_flash_write_cmd(FLASH_JUMP_MEDIUM+i*nFontsize,nFontsize,((uint8_t*)fontmed)+i*nFontsize);
 80009cc:	1dbb      	adds	r3, r7, #6
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	1c7a      	adds	r2, r7, #1
 80009d2:	7812      	ldrb	r2, [r2, #0]
 80009d4:	4353      	muls	r3, r2
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	01d2      	lsls	r2, r2, #7
 80009da:	4694      	mov	ip, r2
 80009dc:	4463      	add	r3, ip
 80009de:	0018      	movs	r0, r3
 80009e0:	1dbb      	adds	r3, r7, #6
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	1c7a      	adds	r2, r7, #1
 80009e6:	7812      	ldrb	r2, [r2, #0]
 80009e8:	4353      	muls	r3, r2
 80009ea:	001a      	movs	r2, r3
 80009ec:	4b5b      	ldr	r3, [pc, #364]	; (8000b5c <main+0x2f8>)
 80009ee:	18d2      	adds	r2, r2, r3
 80009f0:	1c7b      	adds	r3, r7, #1
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	0019      	movs	r1, r3
 80009f6:	f7ff fe87 	bl	8000708 <sst_flash_write_cmd>

  	  	  do
  	  	  {
  	  		pGP_LED->ODR |= GPIO_ODR_3;
 80009fa:	4b52      	ldr	r3, [pc, #328]	; (8000b44 <main+0x2e0>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a51      	ldr	r2, [pc, #324]	; (8000b44 <main+0x2e0>)
 8000a00:	6812      	ldr	r2, [r2, #0]
 8000a02:	6952      	ldr	r2, [r2, #20]
 8000a04:	2108      	movs	r1, #8
 8000a06:	430a      	orrs	r2, r1
 8000a08:	615a      	str	r2, [r3, #20]
  	  		  sst_flash_read_status();
 8000a0a:	f7ff fedb 	bl	80007c4 <sst_flash_read_status>
  	  		  HAL_Delay(10);
 8000a0e:	200a      	movs	r0, #10
 8000a10:	f7ff fd3c 	bl	800048c <HAL_Delay>
  	  	  }while(sHandler.BUSY1);
 8000a14:	4b4f      	ldr	r3, [pc, #316]	; (8000b54 <main+0x2f0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	07db      	lsls	r3, r3, #31
 8000a1a:	0fdb      	lsrs	r3, r3, #31
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1eb      	bne.n	80009fa <main+0x196>
  	    for(i=0;i<size/nFontsize;i++)
 8000a22:	1dbb      	adds	r3, r7, #6
 8000a24:	881a      	ldrh	r2, [r3, #0]
 8000a26:	1dbb      	adds	r3, r7, #6
 8000a28:	3201      	adds	r2, #1
 8000a2a:	801a      	strh	r2, [r3, #0]
 8000a2c:	1dbb      	adds	r3, r7, #6
 8000a2e:	881c      	ldrh	r4, [r3, #0]
 8000a30:	1cbb      	adds	r3, r7, #2
 8000a32:	881a      	ldrh	r2, [r3, #0]
 8000a34:	1c7b      	adds	r3, r7, #1
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	0019      	movs	r1, r3
 8000a3a:	0010      	movs	r0, r2
 8000a3c:	f7ff fbee 	bl	800021c <__divsi3>
 8000a40:	0003      	movs	r3, r0
 8000a42:	429c      	cmp	r4, r3
 8000a44:	dbb8      	blt.n	80009b8 <main+0x154>
  	    }

  	pGP_LED->ODR |= GPIO_ODR_3;
 8000a46:	4b3f      	ldr	r3, [pc, #252]	; (8000b44 <main+0x2e0>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a3e      	ldr	r2, [pc, #248]	; (8000b44 <main+0x2e0>)
 8000a4c:	6812      	ldr	r2, [r2, #0]
 8000a4e:	6952      	ldr	r2, [r2, #20]
 8000a50:	2108      	movs	r1, #8
 8000a52:	430a      	orrs	r2, r1
 8000a54:	615a      	str	r2, [r3, #20]
	while(pGP_BTN->IDR&GPIO_IDR_0);
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	4b3b      	ldr	r3, [pc, #236]	; (8000b48 <main+0x2e4>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	691b      	ldr	r3, [r3, #16]
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4013      	ands	r3, r2
 8000a62:	d1f9      	bne.n	8000a58 <main+0x1f4>
	pGP_LED->ODR &= ~GPIO_ODR_3;
 8000a64:	4b37      	ldr	r3, [pc, #220]	; (8000b44 <main+0x2e0>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a36      	ldr	r2, [pc, #216]	; (8000b44 <main+0x2e0>)
 8000a6a:	6812      	ldr	r2, [r2, #0]
 8000a6c:	6952      	ldr	r2, [r2, #20]
 8000a6e:	2108      	movs	r1, #8
 8000a70:	438a      	bics	r2, r1
 8000a72:	615a      	str	r2, [r3, #20]
	//step one, font med.
	size = sizeof(fontlarge);
 8000a74:	1cbb      	adds	r3, r7, #2
 8000a76:	4a3a      	ldr	r2, [pc, #232]	; (8000b60 <main+0x2fc>)
 8000a78:	801a      	strh	r2, [r3, #0]
	nFontsize = 52;
 8000a7a:	1c7b      	adds	r3, r7, #1
 8000a7c:	2234      	movs	r2, #52	; 0x34
 8000a7e:	701a      	strb	r2, [r3, #0]
	for(i=0;i<size/nFontsize;i++)
 8000a80:	1dbb      	adds	r3, r7, #6
 8000a82:	2200      	movs	r2, #0
 8000a84:	801a      	strh	r2, [r3, #0]
 8000a86:	e039      	b.n	8000afc <main+0x298>
	{
		pGP_LED->ODR &= ~GPIO_ODR_3;
 8000a88:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <main+0x2e0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a2d      	ldr	r2, [pc, #180]	; (8000b44 <main+0x2e0>)
 8000a8e:	6812      	ldr	r2, [r2, #0]
 8000a90:	6952      	ldr	r2, [r2, #20]
 8000a92:	2108      	movs	r1, #8
 8000a94:	438a      	bics	r2, r1
 8000a96:	615a      	str	r2, [r3, #20]
	  sst_flash_write_enable();
 8000a98:	f7ff fe2e 	bl	80006f8 <sst_flash_write_enable>

	  sst_flash_write_cmd(FLASH_JUMP_LARGE+i*nFontsize,nFontsize,((uint8_t*)fontlarge)+i*nFontsize);
 8000a9c:	1dbb      	adds	r3, r7, #6
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	1c7a      	adds	r2, r7, #1
 8000aa2:	7812      	ldrb	r2, [r2, #0]
 8000aa4:	4353      	muls	r3, r2
 8000aa6:	22c0      	movs	r2, #192	; 0xc0
 8000aa8:	01d2      	lsls	r2, r2, #7
 8000aaa:	4694      	mov	ip, r2
 8000aac:	4463      	add	r3, ip
 8000aae:	0018      	movs	r0, r3
 8000ab0:	1dbb      	adds	r3, r7, #6
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	1c7a      	adds	r2, r7, #1
 8000ab6:	7812      	ldrb	r2, [r2, #0]
 8000ab8:	4353      	muls	r3, r2
 8000aba:	001a      	movs	r2, r3
 8000abc:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <main+0x300>)
 8000abe:	18d2      	adds	r2, r2, r3
 8000ac0:	1c7b      	adds	r3, r7, #1
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	f7ff fe1f 	bl	8000708 <sst_flash_write_cmd>

	  do
	  {
		  pGP_LED->ODR |= GPIO_ODR_3;
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <main+0x2e0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a1d      	ldr	r2, [pc, #116]	; (8000b44 <main+0x2e0>)
 8000ad0:	6812      	ldr	r2, [r2, #0]
 8000ad2:	6952      	ldr	r2, [r2, #20]
 8000ad4:	2108      	movs	r1, #8
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	615a      	str	r2, [r3, #20]
		  sst_flash_read_status();
 8000ada:	f7ff fe73 	bl	80007c4 <sst_flash_read_status>
		  HAL_Delay(10);
 8000ade:	200a      	movs	r0, #10
 8000ae0:	f7ff fcd4 	bl	800048c <HAL_Delay>
	  }while(sHandler.BUSY1);
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <main+0x2f0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	07db      	lsls	r3, r3, #31
 8000aea:	0fdb      	lsrs	r3, r3, #31
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d1eb      	bne.n	8000aca <main+0x266>
	for(i=0;i<size/nFontsize;i++)
 8000af2:	1dbb      	adds	r3, r7, #6
 8000af4:	881a      	ldrh	r2, [r3, #0]
 8000af6:	1dbb      	adds	r3, r7, #6
 8000af8:	3201      	adds	r2, #1
 8000afa:	801a      	strh	r2, [r3, #0]
 8000afc:	1dbb      	adds	r3, r7, #6
 8000afe:	881c      	ldrh	r4, [r3, #0]
 8000b00:	1cbb      	adds	r3, r7, #2
 8000b02:	881a      	ldrh	r2, [r3, #0]
 8000b04:	1c7b      	adds	r3, r7, #1
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	0019      	movs	r1, r3
 8000b0a:	0010      	movs	r0, r2
 8000b0c:	f7ff fb86 	bl	800021c <__divsi3>
 8000b10:	0003      	movs	r3, r0
 8000b12:	429c      	cmp	r4, r3
 8000b14:	dbb8      	blt.n	8000a88 <main+0x224>


  /* Infinite loop */
  while (1)
  {
	  pGP_LED->ODR |= GPIO_ODR_3;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <main+0x2e0>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <main+0x2e0>)
 8000b1c:	6812      	ldr	r2, [r2, #0]
 8000b1e:	6952      	ldr	r2, [r2, #20]
 8000b20:	2108      	movs	r1, #8
 8000b22:	430a      	orrs	r2, r1
 8000b24:	615a      	str	r2, [r3, #20]
	  HAL_Delay(100);
 8000b26:	2064      	movs	r0, #100	; 0x64
 8000b28:	f7ff fcb0 	bl	800048c <HAL_Delay>
	  pGP_LED->ODR &= ~GPIO_ODR_3;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <main+0x2e0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <main+0x2e0>)
 8000b32:	6812      	ldr	r2, [r2, #0]
 8000b34:	6952      	ldr	r2, [r2, #20]
 8000b36:	2108      	movs	r1, #8
 8000b38:	438a      	bics	r2, r1
 8000b3a:	615a      	str	r2, [r3, #20]
	  HAL_Delay(100);
 8000b3c:	2064      	movs	r0, #100	; 0x64
 8000b3e:	f7ff fca5 	bl	800048c <HAL_Delay>
  {
 8000b42:	e7e8      	b.n	8000b16 <main+0x2b2>
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000004 	.word	0x20000004
 8000b4c:	0000076c 	.word	0x0000076c
 8000b50:	08001278 	.word	0x08001278
 8000b54:	2000014c 	.word	0x2000014c
 8000b58:	00000d5c 	.word	0x00000d5c
 8000b5c:	080019e4 	.word	0x080019e4
 8000b60:	0000134c 	.word	0x0000134c
 8000b64:	08002740 	.word	0x08002740

08000b68 <SystemClock_Config>:


/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
    /**Initializes the CPU, AHB and APB busses clocks
    */


  //step one: turn on used clocks.
  RCC->CR |= RCC_CR_HSION_Msk;
 8000b6e:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <SystemClock_Config+0xd4>)
 8000b70:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <SystemClock_Config+0xd4>)
 8000b72:	6812      	ldr	r2, [r2, #0]
 8000b74:	2101      	movs	r1, #1
 8000b76:	430a      	orrs	r2, r1
 8000b78:	601a      	str	r2, [r3, #0]
  RCC->CR2 |= RCC_CR2_HSI48ON_Msk|RCC_CR2_HSI14ON_Msk;
 8000b7a:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <SystemClock_Config+0xd4>)
 8000b7c:	4a2f      	ldr	r2, [pc, #188]	; (8000c3c <SystemClock_Config+0xd4>)
 8000b7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b80:	492f      	ldr	r1, [pc, #188]	; (8000c40 <SystemClock_Config+0xd8>)
 8000b82:	430a      	orrs	r2, r1
 8000b84:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->CSR |= RCC_CSR_LSION_Msk;
 8000b86:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <SystemClock_Config+0xd4>)
 8000b88:	4a2c      	ldr	r2, [pc, #176]	; (8000c3c <SystemClock_Config+0xd4>)
 8000b8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24

  //step two: calibrate all clocks
  RCC->CR &= ~RCC_CR_HSITRIM_Msk;
 8000b92:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <SystemClock_Config+0xd4>)
 8000b94:	4a29      	ldr	r2, [pc, #164]	; (8000c3c <SystemClock_Config+0xd4>)
 8000b96:	6812      	ldr	r2, [r2, #0]
 8000b98:	21f8      	movs	r1, #248	; 0xf8
 8000b9a:	438a      	bics	r2, r1
 8000b9c:	601a      	str	r2, [r3, #0]
  RCC->CR |= 16<<RCC_CR_HSITRIM_Pos;
 8000b9e:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <SystemClock_Config+0xd4>)
 8000ba0:	4a26      	ldr	r2, [pc, #152]	; (8000c3c <SystemClock_Config+0xd4>)
 8000ba2:	6812      	ldr	r2, [r2, #0]
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	601a      	str	r2, [r3, #0]
  RCC->CR2 &= ~RCC_CR2_HSI14TRIM_Msk;
 8000baa:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <SystemClock_Config+0xd4>)
 8000bac:	4a23      	ldr	r2, [pc, #140]	; (8000c3c <SystemClock_Config+0xd4>)
 8000bae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000bb0:	21f8      	movs	r1, #248	; 0xf8
 8000bb2:	438a      	bics	r2, r1
 8000bb4:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->CR2|= 16<<RCC_CR2_HSI14TRIM_Pos;
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <SystemClock_Config+0xd4>)
 8000bb8:	4a20      	ldr	r2, [pc, #128]	; (8000c3c <SystemClock_Config+0xd4>)
 8000bba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	635a      	str	r2, [r3, #52]	; 0x34

  //step three: setup pll values
  RCC->CFGR &= ~RCC_CFGR_SWS_Msk|~RCC_CFGR_PLLMUL_Msk;
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <SystemClock_Config+0xd4>)
 8000bc4:	4a1d      	ldr	r2, [pc, #116]	; (8000c3c <SystemClock_Config+0xd4>)
 8000bc6:	6852      	ldr	r2, [r2, #4]
 8000bc8:	605a      	str	r2, [r3, #4]
  RCC->CFGR |=  RCC_CFGR_SWS_HSI|RCC_PLL_MUL4;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <SystemClock_Config+0xd4>)
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <SystemClock_Config+0xd4>)
 8000bce:	6852      	ldr	r2, [r2, #4]
 8000bd0:	2180      	movs	r1, #128	; 0x80
 8000bd2:	0309      	lsls	r1, r1, #12
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 = RCC_PREDIV_DIV2;
 8000bd8:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <SystemClock_Config+0xd4>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	62da      	str	r2, [r3, #44]	; 0x2c

  //step four: turn on the pll and wait for it to be ready.
  RCC->CR |= RCC_CR_PLLON;
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <SystemClock_Config+0xd4>)
 8000be0:	4a16      	ldr	r2, [pc, #88]	; (8000c3c <SystemClock_Config+0xd4>)
 8000be2:	6812      	ldr	r2, [r2, #0]
 8000be4:	2180      	movs	r1, #128	; 0x80
 8000be6:	0449      	lsls	r1, r1, #17
 8000be8:	430a      	orrs	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]
  while(!((RCC->CR)&RCC_CR_PLLRDY_Msk));
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <SystemClock_Config+0xd4>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	049b      	lsls	r3, r3, #18
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	d0f9      	beq.n	8000bee <SystemClock_Config+0x86>

  //at this point all basic setup was complete, now to setup peripheral clocks.

  //set the system clk to the pll output.
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <SystemClock_Config+0xd4>)
 8000bfc:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <SystemClock_Config+0xd4>)
 8000bfe:	6852      	ldr	r2, [r2, #4]
 8000c00:	2102      	movs	r1, #2
 8000c02:	430a      	orrs	r2, r1
 8000c04:	605a      	str	r2, [r3, #4]
//    Error_Handler();
//  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000c06:	f7ff fd5b 	bl	80006c0 <HAL_RCC_GetHCLKFreq>
 8000c0a:	0002      	movs	r2, r0
 8000c0c:	23fa      	movs	r3, #250	; 0xfa
 8000c0e:	0099      	lsls	r1, r3, #2
 8000c10:	0010      	movs	r0, r2
 8000c12:	f7ff fa79 	bl	8000108 <__udivsi3>
 8000c16:	0003      	movs	r3, r0
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff fd1d 	bl	8000658 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c1e:	2004      	movs	r0, #4
 8000c20:	f7ff fd28 	bl	8000674 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000c24:	2301      	movs	r3, #1
 8000c26:	425b      	negs	r3, r3
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f7ff fced 	bl	800060c <HAL_NVIC_SetPriority>
}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b006      	add	sp, #24
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	00010001 	.word	0x00010001

08000c44 <MX_SPI1_Init>:

}

/* SPI1 init function */
 void MX_SPI1_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
	 __SPI1_CLK_ENABLE();
 8000c4a:	4b4c      	ldr	r3, [pc, #304]	; (8000d7c <MX_SPI1_Init+0x138>)
 8000c4c:	4a4b      	ldr	r2, [pc, #300]	; (8000d7c <MX_SPI1_Init+0x138>)
 8000c4e:	6992      	ldr	r2, [r2, #24]
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	0149      	lsls	r1, r1, #5
 8000c54:	430a      	orrs	r2, r1
 8000c56:	619a      	str	r2, [r3, #24]
 8000c58:	4b48      	ldr	r3, [pc, #288]	; (8000d7c <MX_SPI1_Init+0x138>)
 8000c5a:	699a      	ldr	r2, [r3, #24]
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	015b      	lsls	r3, r3, #5
 8000c60:	4013      	ands	r3, r2
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]


	 __SPI1_FORCE_RESET();
 8000c66:	4b45      	ldr	r3, [pc, #276]	; (8000d7c <MX_SPI1_Init+0x138>)
 8000c68:	4a44      	ldr	r2, [pc, #272]	; (8000d7c <MX_SPI1_Init+0x138>)
 8000c6a:	68d2      	ldr	r2, [r2, #12]
 8000c6c:	2180      	movs	r1, #128	; 0x80
 8000c6e:	0149      	lsls	r1, r1, #5
 8000c70:	430a      	orrs	r2, r1
 8000c72:	60da      	str	r2, [r3, #12]
	 __SPI1_RELEASE_RESET();
 8000c74:	4b41      	ldr	r3, [pc, #260]	; (8000d7c <MX_SPI1_Init+0x138>)
 8000c76:	4a41      	ldr	r2, [pc, #260]	; (8000d7c <MX_SPI1_Init+0x138>)
 8000c78:	68d2      	ldr	r2, [r2, #12]
 8000c7a:	4941      	ldr	r1, [pc, #260]	; (8000d80 <MX_SPI1_Init+0x13c>)
 8000c7c:	400a      	ands	r2, r1
 8000c7e:	60da      	str	r2, [r3, #12]

	 //configure the spi ios

	 //set afr to spi
	 pGP_SPI-> AFR3 = GPIO_AF0_SPI1;
 8000c80:	4b40      	ldr	r3, [pc, #256]	; (8000d84 <MX_SPI1_Init+0x140>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2220      	movs	r2, #32
 8000c86:	189b      	adds	r3, r3, r2
 8000c88:	785a      	ldrb	r2, [r3, #1]
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	400a      	ands	r2, r1
 8000c8e:	705a      	strb	r2, [r3, #1]
	 pGP_SPI->AFR4 = GPIO_AF0_SPI1;
 8000c90:	4b3c      	ldr	r3, [pc, #240]	; (8000d84 <MX_SPI1_Init+0x140>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2220      	movs	r2, #32
 8000c96:	189b      	adds	r3, r3, r2
 8000c98:	789a      	ldrb	r2, [r3, #2]
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	438a      	bics	r2, r1
 8000c9e:	709a      	strb	r2, [r3, #2]
	 pGP_SPI->AFR5 = GPIO_AF0_SPI1;
 8000ca0:	4b38      	ldr	r3, [pc, #224]	; (8000d84 <MX_SPI1_Init+0x140>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2220      	movs	r2, #32
 8000ca6:	189b      	adds	r3, r3, r2
 8000ca8:	789a      	ldrb	r2, [r3, #2]
 8000caa:	210f      	movs	r1, #15
 8000cac:	400a      	ands	r2, r1
 8000cae:	709a      	strb	r2, [r3, #2]

	 //set pins to push pull
	 pGP_SPI->MODER3 = 0b10;
 8000cb0:	4b34      	ldr	r3, [pc, #208]	; (8000d84 <MX_SPI1_Init+0x140>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	781a      	ldrb	r2, [r3, #0]
 8000cb6:	213f      	movs	r1, #63	; 0x3f
 8000cb8:	400a      	ands	r2, r1
 8000cba:	1c11      	adds	r1, r2, #0
 8000cbc:	2280      	movs	r2, #128	; 0x80
 8000cbe:	4252      	negs	r2, r2
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	701a      	strb	r2, [r3, #0]
	 pGP_SPI->MODER4=	 0b10;
 8000cc4:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <MX_SPI1_Init+0x140>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	785a      	ldrb	r2, [r3, #1]
 8000cca:	2103      	movs	r1, #3
 8000ccc:	438a      	bics	r2, r1
 8000cce:	1c11      	adds	r1, r2, #0
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	705a      	strb	r2, [r3, #1]
	 pGP_SPI->MODER5 = 0b10;
 8000cd6:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <MX_SPI1_Init+0x140>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	785a      	ldrb	r2, [r3, #1]
 8000cdc:	210c      	movs	r1, #12
 8000cde:	438a      	bics	r2, r1
 8000ce0:	1c11      	adds	r1, r2, #0
 8000ce2:	2208      	movs	r2, #8
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	705a      	strb	r2, [r3, #1]

	 //set pins to push pull
	 pGP_SPI->OT3 = 0;
 8000ce8:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <MX_SPI1_Init+0x140>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	791a      	ldrb	r2, [r3, #4]
 8000cee:	2108      	movs	r1, #8
 8000cf0:	438a      	bics	r2, r1
 8000cf2:	711a      	strb	r2, [r3, #4]
	 pGP_SPI->OT4 = 0;
 8000cf4:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <MX_SPI1_Init+0x140>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	791a      	ldrb	r2, [r3, #4]
 8000cfa:	2110      	movs	r1, #16
 8000cfc:	438a      	bics	r2, r1
 8000cfe:	711a      	strb	r2, [r3, #4]
	 pGP_SPI->OT5 = 0;
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <MX_SPI1_Init+0x140>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	791a      	ldrb	r2, [r3, #4]
 8000d06:	2120      	movs	r1, #32
 8000d08:	438a      	bics	r2, r1
 8000d0a:	711a      	strb	r2, [r3, #4]

	 //set pins to high speed
	 pGP_SPI->OSPEEDR3 = GPIO_SPEED_FREQ_HIGH;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <MX_SPI1_Init+0x140>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	7a1a      	ldrb	r2, [r3, #8]
 8000d12:	2140      	movs	r1, #64	; 0x40
 8000d14:	4249      	negs	r1, r1
 8000d16:	430a      	orrs	r2, r1
 8000d18:	721a      	strb	r2, [r3, #8]
	 pGP_SPI->OSPEEDR4 = GPIO_SPEED_FREQ_HIGH;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <MX_SPI1_Init+0x140>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	7a5a      	ldrb	r2, [r3, #9]
 8000d20:	2103      	movs	r1, #3
 8000d22:	430a      	orrs	r2, r1
 8000d24:	725a      	strb	r2, [r3, #9]
	 pGP_SPI->OSPEEDR5 = GPIO_SPEED_FREQ_HIGH;
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_SPI1_Init+0x140>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	7a5a      	ldrb	r2, [r3, #9]
 8000d2c:	210c      	movs	r1, #12
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	725a      	strb	r2, [r3, #9]


	 pGP_I2C->AFR15 = 0;
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <MX_SPI1_Init+0x144>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2220      	movs	r2, #32
 8000d38:	189b      	adds	r3, r3, r2
 8000d3a:	79da      	ldrb	r2, [r3, #7]
 8000d3c:	210f      	movs	r1, #15
 8000d3e:	400a      	ands	r2, r1
 8000d40:	71da      	strb	r2, [r3, #7]
	 pGP_I2C->MODER15 = 0b01;
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_SPI1_Init+0x144>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	78da      	ldrb	r2, [r3, #3]
 8000d48:	213f      	movs	r1, #63	; 0x3f
 8000d4a:	400a      	ands	r2, r1
 8000d4c:	1c11      	adds	r1, r2, #0
 8000d4e:	2240      	movs	r2, #64	; 0x40
 8000d50:	430a      	orrs	r2, r1
 8000d52:	70da      	strb	r2, [r3, #3]
	 pGP_I2C->OT15 = 0;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_SPI1_Init+0x144>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	795a      	ldrb	r2, [r3, #5]
 8000d5a:	217f      	movs	r1, #127	; 0x7f
 8000d5c:	400a      	ands	r2, r1
 8000d5e:	715a      	strb	r2, [r3, #5]
	 pGP_SPI->OSPEEDR15 = GPIO_SPEED_FREQ_HIGH;
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_SPI1_Init+0x140>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	7ada      	ldrb	r2, [r3, #11]
 8000d66:	2140      	movs	r1, #64	; 0x40
 8000d68:	4249      	negs	r1, r1
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	72da      	strb	r2, [r3, #11]

	 spi_init();
 8000d6e:	f000 f881 	bl	8000e74 <spi_init>


}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b002      	add	sp, #8
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	ffffefff 	.word	0xffffefff
 8000d84:	2000000c 	.word	0x2000000c
 8000d88:	20000008 	.word	0x20000008

08000d8c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
*/

 void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	4b33      	ldr	r3, [pc, #204]	; (8000e60 <MX_GPIO_Init+0xd4>)
 8000d94:	4a32      	ldr	r2, [pc, #200]	; (8000e60 <MX_GPIO_Init+0xd4>)
 8000d96:	6952      	ldr	r2, [r2, #20]
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	0289      	lsls	r1, r1, #10
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	615a      	str	r2, [r3, #20]
 8000da0:	4b2f      	ldr	r3, [pc, #188]	; (8000e60 <MX_GPIO_Init+0xd4>)
 8000da2:	695a      	ldr	r2, [r3, #20]
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	029b      	lsls	r3, r3, #10
 8000da8:	4013      	ands	r3, r2
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b2c      	ldr	r3, [pc, #176]	; (8000e60 <MX_GPIO_Init+0xd4>)
 8000db0:	4a2b      	ldr	r2, [pc, #172]	; (8000e60 <MX_GPIO_Init+0xd4>)
 8000db2:	6952      	ldr	r2, [r2, #20]
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	02c9      	lsls	r1, r1, #11
 8000db8:	430a      	orrs	r2, r1
 8000dba:	615a      	str	r2, [r3, #20]
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <MX_GPIO_Init+0xd4>)
 8000dbe:	695a      	ldr	r2, [r3, #20]
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	02db      	lsls	r3, r3, #11
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : GP_LED_Pin */
  pGP_LED->MODER3 = GPIO_MODE_OUTPUT_PP;
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <MX_GPIO_Init+0xd8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	781a      	ldrb	r2, [r3, #0]
 8000dd0:	213f      	movs	r1, #63	; 0x3f
 8000dd2:	400a      	ands	r2, r1
 8000dd4:	1c11      	adds	r1, r2, #0
 8000dd6:	2240      	movs	r2, #64	; 0x40
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	701a      	strb	r2, [r3, #0]
  pGP_LED->PUPDR3 =GPIO_NOPULL;
 8000ddc:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <MX_GPIO_Init+0xd8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	7b1a      	ldrb	r2, [r3, #12]
 8000de2:	213f      	movs	r1, #63	; 0x3f
 8000de4:	400a      	ands	r2, r1
 8000de6:	731a      	strb	r2, [r3, #12]
  pGP_LED->OSPEEDR3 = GPIO_SPEED_FREQ_LOW;
 8000de8:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <MX_GPIO_Init+0xd8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	7a1a      	ldrb	r2, [r3, #8]
 8000dee:	213f      	movs	r1, #63	; 0x3f
 8000df0:	400a      	ands	r2, r1
 8000df2:	721a      	strb	r2, [r3, #8]

  /*Configure GPIO pin : USR_BTN_Pin */
  pGP_BTN->MODER0 = GPIO_MODE_INPUT;
 8000df4:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_GPIO_Init+0xdc>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	781a      	ldrb	r2, [r3, #0]
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	438a      	bics	r2, r1
 8000dfe:	701a      	strb	r2, [r3, #0]
  pGP_BTN->PUPDR0 =GPIO_NOPULL;
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <MX_GPIO_Init+0xdc>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	7b1a      	ldrb	r2, [r3, #12]
 8000e06:	2103      	movs	r1, #3
 8000e08:	438a      	bics	r2, r1
 8000e0a:	731a      	strb	r2, [r3, #12]
  pGP_BTN->OSPEEDR0 = GPIO_SPEED_FREQ_LOW;
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <MX_GPIO_Init+0xdc>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	7a1a      	ldrb	r2, [r3, #8]
 8000e12:	2103      	movs	r1, #3
 8000e14:	438a      	bics	r2, r1
 8000e16:	721a      	strb	r2, [r3, #8]


  //Connect usr btn to external interrupt
  pSYSCFG->EXTICR[0] |= 1;
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_GPIO_Init+0xe0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <MX_GPIO_Init+0xe0>)
 8000e1e:	6812      	ldr	r2, [r2, #0]
 8000e20:	6892      	ldr	r2, [r2, #8]
 8000e22:	2101      	movs	r1, #1
 8000e24:	430a      	orrs	r2, r1
 8000e26:	609a      	str	r2, [r3, #8]


  pEXTI->IMR 	|= 1;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_GPIO_Init+0xe4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a10      	ldr	r2, [pc, #64]	; (8000e70 <MX_GPIO_Init+0xe4>)
 8000e2e:	6812      	ldr	r2, [r2, #0]
 8000e30:	6812      	ldr	r2, [r2, #0]
 8000e32:	2101      	movs	r1, #1
 8000e34:	430a      	orrs	r2, r1
 8000e36:	601a      	str	r2, [r3, #0]
  //pEXTI->RTSR 	|= 1;
  pEXTI->FTSR 	|= 1;
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <MX_GPIO_Init+0xe4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0c      	ldr	r2, [pc, #48]	; (8000e70 <MX_GPIO_Init+0xe4>)
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	68d2      	ldr	r2, [r2, #12]
 8000e42:	2101      	movs	r1, #1
 8000e44:	430a      	orrs	r2, r1
 8000e46:	60da      	str	r2, [r3, #12]

  //turn on exti0 interrupt

  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2005      	movs	r0, #5
 8000e4e:	f7ff fbdd 	bl	800060c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000e52:	2005      	movs	r0, #5
 8000e54:	f7ff fbf0 	bl	8000638 <HAL_NVIC_EnableIRQ>

  //unmask interrupt


}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b002      	add	sp, #8
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40021000 	.word	0x40021000
 8000e64:	20000000 	.word	0x20000000
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	20000014 	.word	0x20000014
 8000e70:	20000010 	.word	0x20000010

08000e74 <spi_init>:
#include "stm32f042x6.h"

SPI_TypeDef* pSPI = SPI1;
 GPIO_TypeDef* pGP_NSS = GPIOA;
int spi_init()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	 * baud rate is pclk/8
	 * spi is master
	 * clk is 0 when idle
	 * clk will rise on the first data bit.
	 */
	pSPI->CR1 &= (~SPI_CR1_BIDIMODE)&(~SPI_CR1_BIDIOE)&(~SPI_CR1_CRCEN)&(~SPI_CR1_RXONLY)&(~SPI_CR1_SSM)&(~SPI_CR1_LSBFIRST)&(~SPI_CR1_CPOL)&(~SPI_CR1_CPHA);
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <spi_init+0x60>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a15      	ldr	r2, [pc, #84]	; (8000ed4 <spi_init+0x60>)
 8000e7e:	6812      	ldr	r2, [r2, #0]
 8000e80:	6812      	ldr	r2, [r2, #0]
 8000e82:	4915      	ldr	r1, [pc, #84]	; (8000ed8 <spi_init+0x64>)
 8000e84:	400a      	ands	r2, r1
 8000e86:	601a      	str	r2, [r3, #0]
	pSPI->CR1 |= (SPI_CR1_MSTR)|(2<<SPI_CR1_BR_Pos);
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <spi_init+0x60>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a11      	ldr	r2, [pc, #68]	; (8000ed4 <spi_init+0x60>)
 8000e8e:	6812      	ldr	r2, [r2, #0]
 8000e90:	6812      	ldr	r2, [r2, #0]
 8000e92:	2114      	movs	r1, #20
 8000e94:	430a      	orrs	r2, r1
 8000e96:	601a      	str	r2, [r3, #0]
	 * set the data size to 8 bits
	 * enable nss pulse.
	 */


	pSPI->CR2 &= (~SPI_CR2_TXEIE)&(~SPI_CR2_RXNEIE)&(~SPI_CR2_ERRIE)&(~SPI_CR2_FRF)&(~SPI_CR2_TXDMAEN)&(~SPI_CR2_RXDMAEN);
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <spi_init+0x60>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <spi_init+0x60>)
 8000e9e:	6812      	ldr	r2, [r2, #0]
 8000ea0:	6852      	ldr	r2, [r2, #4]
 8000ea2:	21f3      	movs	r1, #243	; 0xf3
 8000ea4:	438a      	bics	r2, r1
 8000ea6:	605a      	str	r2, [r3, #4]
	pSPI->CR2 |= (SPI_CR2_NSSP)|(7<<SPI_CR2_DS_Pos);
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <spi_init+0x60>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a09      	ldr	r2, [pc, #36]	; (8000ed4 <spi_init+0x60>)
 8000eae:	6812      	ldr	r2, [r2, #0]
 8000eb0:	6852      	ldr	r2, [r2, #4]
 8000eb2:	21e1      	movs	r1, #225	; 0xe1
 8000eb4:	00c9      	lsls	r1, r1, #3
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	605a      	str	r2, [r3, #4]


	//enable the spi module.
	pSPI->CR1 |= (SPI_CR1_SPE);
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <spi_init+0x60>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <spi_init+0x60>)
 8000ec0:	6812      	ldr	r2, [r2, #0]
 8000ec2:	6812      	ldr	r2, [r2, #0]
 8000ec4:	2140      	movs	r1, #64	; 0x40
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	601a      	str	r2, [r3, #0]

	return 0;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	20000018 	.word	0x20000018
 8000ed8:	ffff197c 	.word	0xffff197c

08000edc <spi_write_blocking>:

int spi_write_blocking(uint8_t* pData,uint16_t nSize)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	000a      	movs	r2, r1
 8000ee6:	1cbb      	adds	r3, r7, #2
 8000ee8:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	pGP_NSS->BR15 = 1;
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <spi_write_blocking+0x7c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	7eda      	ldrb	r2, [r3, #27]
 8000ef0:	2180      	movs	r1, #128	; 0x80
 8000ef2:	4249      	negs	r1, r1
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	76da      	strb	r2, [r3, #27]
	for(i=0;i<nSize;i++)
 8000ef8:	230e      	movs	r3, #14
 8000efa:	18fb      	adds	r3, r7, r3
 8000efc:	2200      	movs	r2, #0
 8000efe:	801a      	strh	r2, [r3, #0]
 8000f00:	e017      	b.n	8000f32 <spi_write_blocking+0x56>
	{

		//send data to buffer
		   *((__IO uint8_t *)&pSPI->DR) = *(pData+i);
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <spi_write_blocking+0x80>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	330c      	adds	r3, #12
 8000f08:	220e      	movs	r2, #14
 8000f0a:	18ba      	adds	r2, r7, r2
 8000f0c:	8812      	ldrh	r2, [r2, #0]
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	188a      	adds	r2, r1, r2
 8000f12:	7812      	ldrb	r2, [r2, #0]
 8000f14:	701a      	strb	r2, [r3, #0]
		 //block until data was sent.
		while(pSPI->SR & SPI_SR_BSY_Msk);
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <spi_write_blocking+0x80>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	2280      	movs	r2, #128	; 0x80
 8000f20:	4013      	ands	r3, r2
 8000f22:	d1f9      	bne.n	8000f18 <spi_write_blocking+0x3c>
	for(i=0;i<nSize;i++)
 8000f24:	230e      	movs	r3, #14
 8000f26:	18fb      	adds	r3, r7, r3
 8000f28:	881a      	ldrh	r2, [r3, #0]
 8000f2a:	230e      	movs	r3, #14
 8000f2c:	18fb      	adds	r3, r7, r3
 8000f2e:	3201      	adds	r2, #1
 8000f30:	801a      	strh	r2, [r3, #0]
 8000f32:	230e      	movs	r3, #14
 8000f34:	18fa      	adds	r2, r7, r3
 8000f36:	1cbb      	adds	r3, r7, #2
 8000f38:	8812      	ldrh	r2, [r2, #0]
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d3e0      	bcc.n	8000f02 <spi_write_blocking+0x26>

	}
	pGP_NSS->BS15 = 1;
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <spi_write_blocking+0x7c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	7e5a      	ldrb	r2, [r3, #25]
 8000f46:	2180      	movs	r1, #128	; 0x80
 8000f48:	4249      	negs	r1, r1
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	765a      	strb	r2, [r3, #25]
	return 0;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	0018      	movs	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b004      	add	sp, #16
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	2000001c 	.word	0x2000001c
 8000f5c:	20000018 	.word	0x20000018

08000f60 <spi_write_single>:

	 pGP_NSS->BS15 = 1;
	return 0;
}
int spi_write_single(uint8_t nData)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	0002      	movs	r2, r0
 8000f68:	1dfb      	adds	r3, r7, #7
 8000f6a:	701a      	strb	r2, [r3, #0]
	pGP_NSS->BR15 = 1;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <spi_write_single+0x4c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	7eda      	ldrb	r2, [r3, #27]
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	4249      	negs	r1, r1
 8000f76:	430a      	orrs	r2, r1
 8000f78:	76da      	strb	r2, [r3, #27]
	   *((__IO uint8_t *)&pSPI->DR) = nData;
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <spi_write_single+0x50>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	330c      	adds	r3, #12
 8000f80:	1dfa      	adds	r2, r7, #7
 8000f82:	7812      	ldrb	r2, [r2, #0]
 8000f84:	701a      	strb	r2, [r3, #0]
	   while(pSPI->SR & SPI_SR_BSY_Msk); //wait for the data to be sent.
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <spi_write_single+0x50>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2280      	movs	r2, #128	; 0x80
 8000f90:	4013      	ands	r3, r2
 8000f92:	d1f9      	bne.n	8000f88 <spi_write_single+0x28>

	   pGP_NSS->BS15 = 1;
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <spi_write_single+0x4c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	7e5a      	ldrb	r2, [r3, #25]
 8000f9a:	2180      	movs	r1, #128	; 0x80
 8000f9c:	4249      	negs	r1, r1
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	765a      	strb	r2, [r3, #25]
	return 0;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2000001c 	.word	0x2000001c
 8000fb0:	20000018 	.word	0x20000018

08000fb4 <spi_write_read>:
	//pull data from buffer
	return  *((__IO uint8_t *)&pSPI->DR);
	pGP_NSS->BS15 = 1;
}
int spi_write_read(uint8_t* pTxdata,uint16_t nTx_size,uint8_t* pRxdata,uint16_t nRx_size)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	0008      	movs	r0, r1
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	0019      	movs	r1, r3
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	1c02      	adds	r2, r0, #0
 8000fc8:	801a      	strh	r2, [r3, #0]
 8000fca:	2308      	movs	r3, #8
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	1c0a      	adds	r2, r1, #0
 8000fd0:	801a      	strh	r2, [r3, #0]
	uint16_t i=0;
 8000fd2:	2316      	movs	r3, #22
 8000fd4:	18fb      	adds	r3, r7, r3
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	801a      	strh	r2, [r3, #0]
	//lower the nss line.
	pGP_NSS->BR15 = 1;
 8000fda:	4b3c      	ldr	r3, [pc, #240]	; (80010cc <spi_write_read+0x118>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	7eda      	ldrb	r2, [r3, #27]
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	4249      	negs	r1, r1
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	76da      	strb	r2, [r3, #27]
	//write the required data to the device.
	for(i=0;i<nTx_size;i++)
 8000fe8:	2316      	movs	r3, #22
 8000fea:	18fb      	adds	r3, r7, r3
 8000fec:	2200      	movs	r2, #0
 8000fee:	801a      	strh	r2, [r3, #0]
 8000ff0:	e017      	b.n	8001022 <spi_write_read+0x6e>
	{
		//send data to buffer
		   *((__IO uint8_t *)&pSPI->DR) = *(pTxdata+i);
 8000ff2:	4b37      	ldr	r3, [pc, #220]	; (80010d0 <spi_write_read+0x11c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	330c      	adds	r3, #12
 8000ff8:	2216      	movs	r2, #22
 8000ffa:	18ba      	adds	r2, r7, r2
 8000ffc:	8812      	ldrh	r2, [r2, #0]
 8000ffe:	68f9      	ldr	r1, [r7, #12]
 8001000:	188a      	adds	r2, r1, r2
 8001002:	7812      	ldrb	r2, [r2, #0]
 8001004:	701a      	strb	r2, [r3, #0]
		 //block until data was sent.
		while(pSPI->SR & SPI_SR_BSY_Msk);
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <spi_write_read+0x11c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2280      	movs	r2, #128	; 0x80
 8001010:	4013      	ands	r3, r2
 8001012:	d1f9      	bne.n	8001008 <spi_write_read+0x54>
	for(i=0;i<nTx_size;i++)
 8001014:	2316      	movs	r3, #22
 8001016:	18fb      	adds	r3, r7, r3
 8001018:	881a      	ldrh	r2, [r3, #0]
 800101a:	2316      	movs	r3, #22
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	3201      	adds	r2, #1
 8001020:	801a      	strh	r2, [r3, #0]
 8001022:	2316      	movs	r3, #22
 8001024:	18fa      	adds	r2, r7, r3
 8001026:	230a      	movs	r3, #10
 8001028:	18fb      	adds	r3, r7, r3
 800102a:	8812      	ldrh	r2, [r2, #0]
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	429a      	cmp	r2, r3
 8001030:	d3df      	bcc.n	8000ff2 <spi_write_read+0x3e>
//		*((__IO uint8_t *)&pSPI->DR);
//	}while((pSPI->SR & SPI_SR_FRLVL_Msk) != 0);

	do
	{
		*((__IO uint8_t *)&pSPI->DR);
 8001032:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <spi_write_read+0x11c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	330c      	adds	r3, #12
 8001038:	781b      	ldrb	r3, [r3, #0]
	}while(i--);
 800103a:	2316      	movs	r3, #22
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	2216      	movs	r2, #22
 8001042:	18ba      	adds	r2, r7, r2
 8001044:	1e59      	subs	r1, r3, #1
 8001046:	8011      	strh	r1, [r2, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f2      	bne.n	8001032 <spi_write_read+0x7e>
//	}



	//read data from dev
	for(i=0;i<nRx_size;i++)
 800104c:	2316      	movs	r3, #22
 800104e:	18fb      	adds	r3, r7, r3
 8001050:	2200      	movs	r2, #0
 8001052:	801a      	strh	r2, [r3, #0]
 8001054:	e025      	b.n	80010a2 <spi_write_read+0xee>
	{
		//send dummy write to get clocks on the bus.
		 *((__IO uint8_t *)&pSPI->DR) = 0;
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <spi_write_read+0x11c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	330c      	adds	r3, #12
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
		 while(pSPI->SR & SPI_SR_BSY_Msk); //wait for the data to be sent.
 8001060:	46c0      	nop			; (mov r8, r8)
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <spi_write_read+0x11c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	2280      	movs	r2, #128	; 0x80
 800106a:	4013      	ands	r3, r2
 800106c:	d1f9      	bne.n	8001062 <spi_write_read+0xae>
		//ensure data is waiting in the buffer
		while((pSPI->SR&SPI_SR_FRLVL_Msk) == 0);
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <spi_write_read+0x11c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	23c0      	movs	r3, #192	; 0xc0
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	4013      	ands	r3, r2
 800107c:	d0f8      	beq.n	8001070 <spi_write_read+0xbc>
		//pull data from buffer
		*(pRxdata + i) = *((__IO uint8_t *)&pSPI->DR);
 800107e:	2316      	movs	r3, #22
 8001080:	18fb      	adds	r3, r7, r3
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	18d2      	adds	r2, r2, r3
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <spi_write_read+0x11c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	330c      	adds	r3, #12
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	7013      	strb	r3, [r2, #0]
	for(i=0;i<nRx_size;i++)
 8001094:	2316      	movs	r3, #22
 8001096:	18fb      	adds	r3, r7, r3
 8001098:	881a      	ldrh	r2, [r3, #0]
 800109a:	2316      	movs	r3, #22
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	3201      	adds	r2, #1
 80010a0:	801a      	strh	r2, [r3, #0]
 80010a2:	2316      	movs	r3, #22
 80010a4:	18fa      	adds	r2, r7, r3
 80010a6:	2308      	movs	r3, #8
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	8812      	ldrh	r2, [r2, #0]
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d3d1      	bcc.n	8001056 <spi_write_read+0xa2>
//	{
//		*(pRxdata) = *((__IO uint8_t *)&pSPI->DR);
//	}

	//raise the nss line.
	pGP_NSS->BS15 = 1;
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <spi_write_read+0x118>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	7e5a      	ldrb	r2, [r3, #25]
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	4249      	negs	r1, r1
 80010bc:	430a      	orrs	r2, r1
 80010be:	765a      	strb	r2, [r3, #25]
	return 0;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	0018      	movs	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b006      	add	sp, #24
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	2000001c 	.word	0x2000001c
 80010d0:	20000018 	.word	0x20000018

080010d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010d4:	4813      	ldr	r0, [pc, #76]	; (8001124 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010d6:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80010d8:	2004      	movs	r0, #4
    LDR R1, [R0]
 80010da:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80010dc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80010de:	221f      	movs	r2, #31
    CMP R1, R2
 80010e0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80010e2:	d105      	bne.n	80010f0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80010e4:	4810      	ldr	r0, [pc, #64]	; (8001128 <LoopForever+0x6>)
    LDR R1,=0x00000001
 80010e6:	2101      	movs	r1, #1
    STR R1, [R0]
 80010e8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80010ea:	4810      	ldr	r0, [pc, #64]	; (800112c <LoopForever+0xa>)
    LDR R1,=0x00000000
 80010ec:	2100      	movs	r1, #0
    STR R1, [R0]
 80010ee:	6001      	str	r1, [r0, #0]

080010f0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010f2:	e003      	b.n	80010fc <LoopCopyDataInit>

080010f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <LoopForever+0xe>)
  ldr r3, [r3, r1]
 80010f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010fa:	3104      	adds	r1, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010fc:	480d      	ldr	r0, [pc, #52]	; (8001134 <LoopForever+0x12>)
  ldr r3, =_edata
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <LoopForever+0x16>)
  adds r2, r0, r1
 8001100:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001102:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001104:	d3f6      	bcc.n	80010f4 <CopyDataInit>
  ldr r2, =_sbss
 8001106:	4a0d      	ldr	r2, [pc, #52]	; (800113c <LoopForever+0x1a>)
  b LoopFillZerobss
 8001108:	e002      	b.n	8001110 <LoopFillZerobss>

0800110a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  str  r3, [r2]
 800110c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110e:	3204      	adds	r2, #4

08001110 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <LoopForever+0x1e>)
  cmp r2, r3
 8001112:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001114:	d3f9      	bcc.n	800110a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001116:	f000 f831 	bl	800117c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800111a:	f000 f873 	bl	8001204 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800111e:	f7ff fba1 	bl	8000864 <main>

08001122 <LoopForever>:

LoopForever:
    b LoopForever
 8001122:	e7fe      	b.n	8001122 <LoopForever>
  ldr   r0, =_estack
 8001124:	20001800 	.word	0x20001800
    LDR R0,=0x40021018
 8001128:	40021018 	.word	0x40021018
    LDR R0,=0x40010000
 800112c:	40010000 	.word	0x40010000
  ldr r3, =_sidata
 8001130:	08003a94 	.word	0x08003a94
  ldr r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001138:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 800113c:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8001140:	20000154 	.word	0x20000154

08001144 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC1_IRQHandler>

08001146 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <HardFault_Handler+0x4>

08001156 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001164:	46c0      	nop			; (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116e:	f7ff f977 	bl	8000460 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001172:	f7ff fa99 	bl	80006a8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <SystemInit+0x70>)
 8001182:	4a1a      	ldr	r2, [pc, #104]	; (80011ec <SystemInit+0x70>)
 8001184:	6812      	ldr	r2, [r2, #0]
 8001186:	2101      	movs	r1, #1
 8001188:	430a      	orrs	r2, r1
 800118a:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <SystemInit+0x70>)
 800118e:	4a17      	ldr	r2, [pc, #92]	; (80011ec <SystemInit+0x70>)
 8001190:	6852      	ldr	r2, [r2, #4]
 8001192:	4917      	ldr	r1, [pc, #92]	; (80011f0 <SystemInit+0x74>)
 8001194:	400a      	ands	r2, r1
 8001196:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <SystemInit+0x70>)
 800119a:	4a14      	ldr	r2, [pc, #80]	; (80011ec <SystemInit+0x70>)
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	4915      	ldr	r1, [pc, #84]	; (80011f4 <SystemInit+0x78>)
 80011a0:	400a      	ands	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <SystemInit+0x70>)
 80011a6:	4a11      	ldr	r2, [pc, #68]	; (80011ec <SystemInit+0x70>)
 80011a8:	6812      	ldr	r2, [r2, #0]
 80011aa:	4913      	ldr	r1, [pc, #76]	; (80011f8 <SystemInit+0x7c>)
 80011ac:	400a      	ands	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <SystemInit+0x70>)
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <SystemInit+0x70>)
 80011b4:	6852      	ldr	r2, [r2, #4]
 80011b6:	4911      	ldr	r1, [pc, #68]	; (80011fc <SystemInit+0x80>)
 80011b8:	400a      	ands	r2, r1
 80011ba:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <SystemInit+0x70>)
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <SystemInit+0x70>)
 80011c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80011c2:	210f      	movs	r1, #15
 80011c4:	438a      	bics	r2, r1
 80011c6:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <SystemInit+0x70>)
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <SystemInit+0x70>)
 80011cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011ce:	490c      	ldr	r1, [pc, #48]	; (8001200 <SystemInit+0x84>)
 80011d0:	400a      	ands	r2, r1
 80011d2:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SystemInit+0x70>)
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <SystemInit+0x70>)
 80011d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011da:	2101      	movs	r1, #1
 80011dc:	438a      	bics	r2, r1
 80011de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80011e0:	4b02      	ldr	r3, [pc, #8]	; (80011ec <SystemInit+0x70>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]

}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40021000 	.word	0x40021000
 80011f0:	08ffb80c 	.word	0x08ffb80c
 80011f4:	fef6ffff 	.word	0xfef6ffff
 80011f8:	fffbffff 	.word	0xfffbffff
 80011fc:	ffc0ffff 	.word	0xffc0ffff
 8001200:	fffffe2c 	.word	0xfffffe2c

08001204 <__libc_init_array>:
 8001204:	b570      	push	{r4, r5, r6, lr}
 8001206:	2600      	movs	r6, #0
 8001208:	4d0c      	ldr	r5, [pc, #48]	; (800123c <__libc_init_array+0x38>)
 800120a:	4c0d      	ldr	r4, [pc, #52]	; (8001240 <__libc_init_array+0x3c>)
 800120c:	1b64      	subs	r4, r4, r5
 800120e:	10a4      	asrs	r4, r4, #2
 8001210:	42a6      	cmp	r6, r4
 8001212:	d109      	bne.n	8001228 <__libc_init_array+0x24>
 8001214:	2600      	movs	r6, #0
 8001216:	f000 f823 	bl	8001260 <_init>
 800121a:	4d0a      	ldr	r5, [pc, #40]	; (8001244 <__libc_init_array+0x40>)
 800121c:	4c0a      	ldr	r4, [pc, #40]	; (8001248 <__libc_init_array+0x44>)
 800121e:	1b64      	subs	r4, r4, r5
 8001220:	10a4      	asrs	r4, r4, #2
 8001222:	42a6      	cmp	r6, r4
 8001224:	d105      	bne.n	8001232 <__libc_init_array+0x2e>
 8001226:	bd70      	pop	{r4, r5, r6, pc}
 8001228:	00b3      	lsls	r3, r6, #2
 800122a:	58eb      	ldr	r3, [r5, r3]
 800122c:	4798      	blx	r3
 800122e:	3601      	adds	r6, #1
 8001230:	e7ee      	b.n	8001210 <__libc_init_array+0xc>
 8001232:	00b3      	lsls	r3, r6, #2
 8001234:	58eb      	ldr	r3, [r5, r3]
 8001236:	4798      	blx	r3
 8001238:	3601      	adds	r6, #1
 800123a:	e7f2      	b.n	8001222 <__libc_init_array+0x1e>
 800123c:	08003a8c 	.word	0x08003a8c
 8001240:	08003a8c 	.word	0x08003a8c
 8001244:	08003a8c 	.word	0x08003a8c
 8001248:	08003a90 	.word	0x08003a90

0800124c <memcpy>:
 800124c:	2300      	movs	r3, #0
 800124e:	b510      	push	{r4, lr}
 8001250:	429a      	cmp	r2, r3
 8001252:	d100      	bne.n	8001256 <memcpy+0xa>
 8001254:	bd10      	pop	{r4, pc}
 8001256:	5ccc      	ldrb	r4, [r1, r3]
 8001258:	54c4      	strb	r4, [r0, r3]
 800125a:	3301      	adds	r3, #1
 800125c:	e7f8      	b.n	8001250 <memcpy+0x4>
	...

08001260 <_init>:
 8001260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001266:	bc08      	pop	{r3}
 8001268:	469e      	mov	lr, r3
 800126a:	4770      	bx	lr

0800126c <_fini>:
 800126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001272:	bc08      	pop	{r3}
 8001274:	469e      	mov	lr, r3
 8001276:	4770      	bx	lr
